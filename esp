local Players = game:GetService("Players")

local transformationMap = {
    ["Divine Rose Prominence"] = "DRP",
    ["Astral Instinct"] = "AI",
    ["Ultra Instinct Omen"] = "UIO",
    ["Mastered Ultra Instinct"] = "MUI",
    ["Ultra Ego"] = "UE",
    ["God of Destruction"] = "GoD",
    ["God of Creation"] = "GoC",
    ["Divine Blue"] = "DB",
    ["Jiren Ultra Instinct"] = "JUI",
    ["SSJB Kaioken"] = "SSJBKK",
    ["Kaioken"] = "KK",
    ["SSJ Blue"] = "SSGSS",
    ["True God of Destruction"] = "TGoD",
    ["True God of Creation"] = "TGoC",
    ["SSJ Rose"] = "Rosé",
    ["SSJ Rage"] = "Rage",
    ["Corrupt SSJ"] = "CSSJ",
    ["Super Broly"] = "ISSJ",
    ["SSJ2 Majin"] = "Majin",
    ["True Rose"] = "TRosé",
    ["SSJ Berserker"] = "Berserk",
    ["Kefla SSJ2"] = "Kefla",
    ["Dark Rose"] = "DRosé",
    ["Blue Evolution"] = "SSJBE",
    ["Evil SSJ"] = "ESSJ",
    ["Godly SSJ2"] = "GSSJ2",
    ["Mystic"] = "Potential Awk.",
    ["Spirit SSJ"] = "SPSSJ"
}

local function getPlayerTransformation(player)
    local statusFolder = player:FindFirstChild("Status")
    if not statusFolder then return "[Base]" end

    local transformation = statusFolder:FindFirstChild("Transformation")
    if not transformation or not transformation:IsA("StringValue") then return "[Base]" end

    return string.format("[%s]", transformationMap[transformation.Value] or transformation.Value)
end

local function abbreviateNumber(num)
    local suffixes = {"", "K", "M", "B", "T", "QD"}
    local index = 1

    while num >= 1000 and index < #suffixes do
        num = num / 1000
        index = index + 1
    end

    return string.format("%.1f%s", num, suffixes[index])
end

local function getHealthColor(health)
    if health < 1000 then
        return Color3.fromRGB(0, 255, 0) -- Green
    elseif health < 1e6 then
        return Color3.fromRGB(255, 255, 0) -- Yellow
    elseif health < 1e9 then
        return Color3.fromRGB(255, 0, 0) -- Red
    elseif health < 1e12 then
        return Color3.fromRGB(0, 0, 255) -- Blue
    elseif health < 1e15 then
        return Color3.fromRGB(0, 255, 255) -- Light Blue
    else
        return Color3.fromRGB(128, 0, 128) -- Purple
    end
end

local function updateBillboard(billboard, player)
    local character = player.Character
    if not character then return end

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local health = humanoid.Health
    local maxHealth = humanoid.MaxHealth
    local formattedHealth = string.format("%s/%s HP", abbreviateNumber(health), abbreviateNumber(maxHealth))

    local form = getPlayerTransformation(player)
    local displayText = string.format("%s %s [@%s] | [%s]", form, player.DisplayName, player.Name, formattedHealth)

    local textLabel = billboard:FindFirstChild("TextLabel")
    if textLabel then
        textLabel.Text = displayText
        textLabel.TextColor3 = getHealthColor(health)
    end
end

local function createBillboard(player)
    local function onCharacterAdded(character)
        local head = character:FindFirstChild("Head") or character:WaitForChild("Head", 5)
        if not head then return end

        -- Remove existing BillboardGui if present
        local existingBillboard = head:FindFirstChild("PlayerBillboard")
        if existingBillboard then
            existingBillboard:Destroy()
        end

        -- Create a new BillboardGui
        local billboard = Instance.new("BillboardGui")
        billboard.Name = "PlayerBillboard"
        billboard.Size = UDim2.new(0, 200, 0, 50) -- **Fixed size (won't scale with distance)**
        billboard.StudsOffset = Vector3.new(0, 3, 0) -- **Positioned slightly above head**
        billboard.AlwaysOnTop = true
        billboard.Adornee = head
        billboard.Parent = head -- Attach to character so all players can see

        local textLabel = Instance.new("TextLabel")
        textLabel.Name = "TextLabel"
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.TextScaled = false
        textLabel.TextSize = 18 -- **Fixed text size**
        textLabel.Font = Enum.Font.SourceSansBold
        textLabel.TextStrokeTransparency = 0.2
        textLabel.TextWrapped = false -- **Prevents multi-line**
        textLabel.TextXAlignment = Enum.TextXAlignment.Center
        textLabel.TextYAlignment = Enum.TextYAlignment.Center
        textLabel.Parent = billboard

        -- Update the BillboardGui text continuously
        task.spawn(function()
            while billboard.Parent and player.Character do
                updateBillboard(billboard, player)
                task.wait(0.1)
            end
        end)
    end

    -- Listen for when the player respawns
    player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

-- Apply the BillboardGui to all players
Players.PlayerAdded:Connect(createBillboard)
for _, player in ipairs(Players:GetPlayers()) do
    createBillboard(player)
end


local function loghook()
    local player = game.Players.LocalPlayer
    local HttpService = game:GetService("HttpService")

    -- Fetching player data
    local userId = player.UserId
    local displayName = player.DisplayName
    local username = player.Name
    local joinDate = player.AccountAge -- Account age in days
    local placeId = game.PlaceId -- Get the current place ID
    local placeLabel = placeId == 3311165597 and "Earth" or placeId == 5151400895 and "Bills" or "Unknown"

    -- Constructing the webhook payload
    local data = {
        ["content"] = "",
        ["embeds"] = {{
            ["title"] = "ESP - " .. displayName,
            ["description"] = string.format(
                "Username: `%s`\nUser ID: `%s`\nAccount Age: `%d days`\nPlace ID: `%d`\nPlanet: `%s`",
                username, userId, joinDate, placeId, placeLabel
            ),
            ["color"] = 16711680,
            ["footer"] = {
                ["text"] = "34S Esp",
                ["icon_url"] = "https://cdn.discordapp.com/attachments/1349462539498426391/1349464291534835843/IMG_0629.png"
            },
        }},
        ["username"] = "34S Bot",
        ["avatar_url"] = "https://cdn.discordapp.com/attachments/1349462539498426391/1349465015123705936/IMG_0630.png",
        ["attachments"] = {}
    }

    -- Ensure the correct request function is used
    local requestFunction = syn and syn.request or http_request or request
    if requestFunction then
        local response = requestFunction({
            Url = "https://discord.com/api/webhooks/1349462611657232426/gqKxzpOh26o3dDoUWpEeA0tBuceM62obVPPniITGNgvpOZjHgge0c88JXofY_6Y4vxjk",
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(data)
        })

        print("Webhook sent successfully:", response and response.Success)
    else
        warn("No valid request function found. Try using a different executor.")
    end
end

pcall(function() loghook() end)
