local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local transformationMap = {
    ["Divine Rose Prominence"] = "DRP",
    ["Astral Instinct"] = "AI",
    ["Ultra Instinct Omen"] = "UI",
    ["Mastered Ultra Instinct"] = "MUI",
    ["Ultra Ego"] = "UE",
    ["God of Destruction"] = "GOD",
    ["God of Creation"] = "GOC",
    ["Divine Blue"] = "DB",
    ["Jiren Ultra Instinct"] = "JUI"
}

local function getPlayerTransformation(player)
    local statusFolder = player:FindFirstChild("Status")
    if not statusFolder then return "[Base]" end

    local transformation = statusFolder:FindFirstChild("Transformation")
    if not transformation or not transformation:IsA("StringValue") then return "[Base]" end

    local form = transformation.Value
    return string.format("[%s]", transformationMap[form] or form) -- Map or return original
end

local function abbreviateNumber(num)
    local suffixes = {"", "K", "M", "B", "T", "QD"}
    local index = 1

    while num >= 1000 and index < #suffixes do
        num = num / 1000
        index = index + 1
    end

    return string.format("%.1f%s", num, suffixes[index])
end

local function getHealthColor(health)
    if health < 1000 then
        return Color3.fromRGB(0, 255, 0) -- Green
    elseif health < 1e6 then
        return Color3.fromRGB(255, 255, 0) -- Yellow
    elseif health < 1e9 then
        return Color3.fromRGB(255, 0, 0) -- Red
    elseif health < 1e12 then
        return Color3.fromRGB(0, 0, 255) -- Blue
    elseif health < 1e15 then
        return Color3.fromRGB(0, 255, 255) -- Light Blue
    else
        return Color3.fromRGB(128, 0, 128) -- Purple
    end
end

local function updateBillboard(billboard, player)
    local character = player.Character
    if not character then return end

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local health = humanoid.Health
    local maxHealth = humanoid.MaxHealth
    local formattedHealth = string.format("%s/%s HP", abbreviateNumber(health), abbreviateNumber(maxHealth))

    local form = getPlayerTransformation(player)
    local displayText = string.format("%s %s [@%s] | [%s]", form, player.DisplayName, player.Name, formattedHealth)

    local textLabel = billboard:FindFirstChild("TextLabel")
    if textLabel then
        textLabel.Text = displayText
        textLabel.TextColor3 = getHealthColor(health)
    end
end

local function createBillboard(player)
    local function onCharacterAdded(character)
        local head = character:FindFirstChild("Head") or character:WaitForChild("Head", 5)
        if not head then return end

        -- Create BillboardGui for every player
        for _, otherPlayer in ipairs(Players:GetPlayers()) do
            if otherPlayer ~= player then
                local otherCharacter = otherPlayer.Character
                if otherCharacter then
                    local otherHead = otherCharacter:FindFirstChild("Head")
                    if otherHead then
                        local billboard = Instance.new("BillboardGui")
                        billboard.Name = "PlayerBillboard"
                        billboard.Size = UDim2.new(12, 0, 4, 0)
                        billboard.StudsOffset = Vector3.new(0, 4, 0)
                        billboard.AlwaysOnTop = true
                        billboard.Adornee = otherHead
                        billboard.Parent = otherHead -- Attach to the head

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Name = "TextLabel"
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.TextScaled = false
                        textLabel.Font = Enum.Font.SourceSansBold
                        textLabel.TextStrokeTransparency = 0.2
                        textLabel.TextSize = 20
                        textLabel.Parent = billboard

                        -- Update text dynamically
                        task.spawn(function()
                            while billboard.Parent and otherPlayer.Character do
                                updateBillboard(billboard, otherPlayer)
                                task.wait(0.1)
                            end
                        end)
                    end
                end
            end
        end
    end

    player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

-- Apply to all players, including new ones
Players.PlayerAdded:Connect(createBillboard)
for _, player in ipairs(Players:GetPlayers()) do
    createBillboard(player)
end
